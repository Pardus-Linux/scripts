#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Script to list security udpates for a given repository.
#
# Usage: (can work for both source and binary)
#
#   script -> to search for default target
#   script pardus-2009 -> to search in pardus-2009 repos
#   script http://packages.pardus.org.tr/pardus-2009-test/pisi-index.xml.bz2  /svn/stable/pisi-index.xml.bz2 -> to search using test repo and source stable index
#


import os
import sys
import urllib2
import piksemel
import bz2
import lzma


distroBase = "http://packages.pardus.org.tr/pardus-2009"


def loadUrl(_url):
    try:
        return urllib2.urlopen(_url).read()
    except urllib2.URLError:
        print "could not download %s" % _url
        sys.exit(1)

def getLastSecurity(parent):
    xnode = parent.getTag("History").tags("Update")
    for tag in xnode:
        release = tag.getAttribute("release")
        updatetime = tag.getTagData("Date")
        if tag.getAttribute("type") == "security" or tag.getTagData("Type") == "security":
            return int(release), updatetime

    return 0, "never"

def unpackXml(url, isStable):
    pkglist = {}

    if url.startswith("http"):
        compressedData = loadUrl(url)
    else:
        compressedData = open(url).read()

    if url.endswith("bz2"):
        rawData = bz2.decompress(compressedData)
    elif url.endswith("xz"):
        rawData = lzma.decompress(compressedData)
    else:
        rawData = compressedData

    index = piksemel.parseString(rawData)
    hasSpecFile = index.getTag("SpecFile")

    if hasSpecFile:
        for parent in index.tags("SpecFile"):
            pkgname = parent.getTag("Source").getTagData("Name")
            pkguri = None # this is source repo
            srcname = pkgname
            lastSecurity, securityUpdate = getLastSecurity(parent)
            if lastSecurity or isStable:
                pkglist[pkgname] = [lastSecurity, securityUpdate, pkguri, srcname]
    else:
        for parent in index.tags("Package"):
            pkgname = parent.getTagData("Name")
            pkguri = parent.getTagData("PackageURI")
            srcname = parent.getTag("Source").getTagData("Name")
            lastSecurity, securityUpdate = getLastSecurity(parent)
            if lastSecurity or isStable:
                pkglist[pkgname] = [lastSecurity, securityUpdate, pkguri, srcname]

    return pkglist


def parsePackages(stablePackages, develPackages):
    updateDict = {}
    stablePackages = stableIndex.keys()
    stablePackages.sort()

    for i in stablePackages:
        if develIndex.has_key(i):
            if develIndex[i][0] > stableIndex[i][0]:
                pkg = develIndex[i]
                if updateDict.has_key(pkg[3]):
                    updateDict[pkg[3]][2].append(pkg[2])
                else:
                    updateDict[pkg[3]] = pkg[1], pkg[0], [pkg[2]]

    return updateDict

if __name__ == "__main__":
    if len(sys.argv) == 3:
        toIndex = sys.argv[2]
        fromIndex = sys.argv[1]

    elif len(sys.argv) == 2:
        distroBase = "http://packages.pardus.org.tr/%s" % sys.argv[1]
        toIndex = "%s/pisi-index.xml.bz2" % distroBase
        fromIndex= "%s-test/pisi-index.xml.bz2" % distroBase

    else:
        toIndex = "%s/pisi-index.xml.bz2" % distroBase
        fromIndex= "%s-test/pisi-index.xml.bz2" % distroBase

    stableIndex = unpackXml(toIndex, True) # True means it is a target repo
    develIndex = unpackXml(fromIndex, False)

    pkg = parsePackages(stableIndex, develIndex)
    pkglist = pkg.keys()
    pkglist.sort()

    print ""
    for i in pkglist:
        print "%s (%s, release %d)" % (i, pkg[i][0], pkg[i][1])
        for p in pkg[i][2]:
            if p:
                print "    %s" % p

        print ""

