#!/usr/bin/python
# -*- coding: utf-8 -*-

import httplib
import sys

import pisi.util as util
from pisi.version import Version

addr = "ftp.gwdg.de/pub/x11/x.org/pub/individual"
prefix = "tar.bz2"

def findLatest(_list):
    dict = {}
    result = []
    for f in _list:
        try:
            name, version = util.parse_package_name(f)
            if dict.has_key(name):
                if Version(dict[name]) < Version(version):
                    dict[name] = version
            else:
                if version:
                    dict[name] = version

        except:
            pass

    for f in dict:
        result.append("%s-%s" % (f, dict[f]))

    return result

def loadFile(_file):
    f = file(_file)
    data = f.read().split("\n")
    f.close()
    return data

def getHttp(_addr, _target):
    root, base = _addr.split("/", 1)
    conn = httplib.HTTPConnection(root)
    conn.request("GET", "/%s/%s/" % (base, _target))
    r = conn.getresponse()
    if r.reason != "OK":
        print "Fetching file list returned error %s %s" % (r.status, r.reason)
        sys.exit(1)

    data = r.read().split("\n")
    return data

def findFiles(_target, _proto):
    files = []
    # data = loadFile("index.html")
    data = getHttp(addr, _target)

    for line in data:
        if prefix in line:
            f = line[line.find("HREF=")+6:line.find(".%s" % prefix)]
            files.append(f)

    return files

def listLatest(target, proto = "http"):
    now = findFiles(target, proto)
    list = findLatest(now)
    list.sort()
    for f in list:
        # print "%s://%s/%s.%s" % (proto, addr, f, prefix)
        print "%s.%s" % (f, prefix)

def usage(msg):
    print """
Error: %s

Usage:
    latestxorg target (target = app, data, doc, driver, font, lib, proto, util, xserver)
    """ % msg

    sys.exit(1)

if __name__ == "__main__":
    try:
        sys.argv[1]
    except IndexError:
        usage("Unsufficient arguments...")

    listLatest(sys.argv[1], "http")

