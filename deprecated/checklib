#!/usr/bin/python
# -*- coding: utf-8 -*-

"""\
checklib analyzes and dumps a report for the shared dependencies
of ELF shared libraries or executables.
"""

import os
import glob
import fnmatch
import re
import sys
import pisi
import magic
import types
import shutil
import tempfile
import subprocess

from optparse import OptionParser

# PiSi objects
INSTALLDB = pisi.db.installdb.InstallDB()
CONSTANTS = pisi.constants.Constants()
CONFIG = pisi.config.Config()

VERBOSE = False
SHOWSYSTEMBASE = False

###
### Helper functions
###


def printv(msg):
    """Prints the message if verbose mode is on."""
    if VERBOSE:
        print msg

def print_header(msg):
    """Print the message in green color with an underline."""
    retval = "%s\n%s\n" % (msg, '-'*len(msg))
    if sys.stdout.isatty():
        print "\x1b[32;01m%s\x1b[0m" % retval
    else:
        print retval

def get_pisi_package(file_name):
    """Returns the name of the PiSi package containing the file file_name."""
    try:
        return pisi.api.search_file(file_name)[0][0]
    except IndexError:
        # Not found in any package
        return "%s (probably broken dependency)" % file_name

def get_systembase_packages():
    """Returns the list of system.base packages."""
    packages = []
    cdb = pisi.db.componentdb.ComponentDB()
    for repo in pisi.db.repodb.RepoDB().list_repos():
        if cdb.has_component("system.base"):
            packages.extend(cdb.get_packages('system.base', repo))

    return packages

def get_install_dir_for_package():
    """Returns the install directory of a package under /var/pisi."""
    if os.path.exists(CONSTANTS.pspec_file):
        pspec = pisi.specfile.SpecFile(CONSTANTS.pspec_file)
        install_dir = "%s/%s-%s-%s%s" % (CONFIG.tmp_dir(),
                                         pspec.source.name,
                                         pspec.getSourceVersion(),
                                         pspec.getSourceRelease(),
                                         CONSTANTS.install_dir_suffix)
        if os.path.exists(install_dir):
            return install_dir

def parse_ldd_output(ldd_output):
    """Parses ldd's output."""

    broken_dependencies = []
    so_map = {}

    for line in ldd_output:
        if "=>" in line:
            # Filter these special objects
            if "linux-gate" in line or \
                    "ld-linux" in line or "linux-vdso" in line:
                continue

            so_name, so_path = line.split("=>")

            if "not found" in so_path:
                # One of the dynamic dependencies is missing
                broken_dependencies.append(so_name.strip())
            else:
                so_map[so_name.strip()] = so_path.split(" (")[0].strip()

    return broken_dependencies, so_map


###
### Core functionality
###

def get_elf_files(where, is_directory=False):
    """
    Returns the list of ELF files in a directory/installed package:
    ['/usr/lib/libfoo.so.3', '/usr/bin/foo-cli']
    """

    shared_objects = []

    magic_db = magic.open(magic.MAGIC_NONE)
    magic_db.load()

    if is_directory:
        printv("Searching directory %s.." % where)
        files = os.popen("find %s" % where).read().strip().split("\n")
    else:
        files = set(["/%s" % file_name.path \
                for file_name in INSTALLDB.get_files(where).list])

    print "Searching for shared objects.."

    for file_name in files:
        file_info = magic_db.file(file_name)
        if "LSB shared object" in file_info:
            shared_objects.append(os.path.realpath(file_name))
            printv("  %s" % file_name)
        elif "LSB executable" in file_info:
            printv("  %s" % file_name)
            shared_objects.append(file_name)

    print "Found %d objects" % len(shared_objects)

    magic_db.close()
    return shared_objects

def get_pc_files(where, is_directory=False):
    """
    Returns the list of pkgconfig files in /usr/{lib,share}/pkgconfig/*.pc files
    ['/usr/lib/', '/usr/bin/foo-cli']
    """

    pc_files = []


    print "Searching for pkgconfig files.."

    if is_directory:
        pc_files = glob.glob("%s/usr/*/pkgconfig/*.pc" % where)
    else:
        pc_files = set([os.path.realpath("/%s" % file_name.path) \
            for file_name in INSTALLDB.get_files(where).list \
            if fnmatch.fnmatch(file_name.path, "*/pkgconfig/*.pc")])

    print "Found %d pc files" % len(pc_files)

    return pc_files


def get_needed_objects(file_name, ld_library_paths=None):
    """Returns the NEEDED objects for file_name including the additional LDPATHs."""

    def parse_unused(output):
        """
        Parses unused direct dependencies from ldd -u -r output.
        Filter out broken dependencies if any as ldd shows them as unused
        direct dependencies.
        """
        result = []
        for line in output.replace("\t", "").split("\n"):
            result.append(line.strip())

        return result[1:]

    def parse_undefs(output):
        """Parses undefined symbols from ldd -u -r output."""
        result = []
        if output:
            for line in output.replace("\t", "").split("\n"):
                if line.startswith("undefined symbol:"):
                    result.append(re.sub("^undefined symbol: (.*)\((.*)\)$", "\\1", line))

        return result

    # Use objdump for DT_NEEDED parsing
    objs = [line.strip().split()[1] for line in \
            os.popen("objdump -p \"%s\" | grep 'NEEDED'" % file_name).readlines()]

    # Get full path to the objects
    unuseds = []
    undefineds = []
    env = os.environ

    if ld_library_paths is not None:
        env.update({'LD_LIBRARY_PATH': ":".join(ld_library_paths)})

    ldd_output = subprocess.Popen(["ldd", file_name],
                                  stdout=subprocess.PIPE,
                                  stderr=subprocess.STDOUT,
                                  env=env).communicate()[0].strip().split("\n")

    ldd_ur_output_unused, ldd_ur_output_undefs = subprocess.Popen(["ldd", "-u", "-r", file_name],
                                                                  stdout=subprocess.PIPE,
                                                                  stderr=subprocess.PIPE,
                                                                  env=env).communicate()

    unuseds = parse_unused(ldd_ur_output_unused.strip())
    undefineds = parse_undefs(ldd_ur_output_undefs.strip())

    broken_dependencies, so_map = parse_ldd_output(ldd_output)

    _objs = []
    for obj in objs:
        # Find the absolute path of libraries from their SONAME's
        if so_map.has_key(obj):
            _objs.append(os.popen("readlink -f %s" % so_map[obj]).read().strip())
        else:
            _objs.append(obj)

    return (_objs, unuseds, undefineds, broken_dependencies)

def check_installed_package(package):
    """Check for an installed package."""
    dependencies = {}
    undefineds = {}
    unuseds = {}
    brokens = set()
    requires = set()

    # When an installed package is checked, we only care
    # about its runtime dependencies.
    written_deps = [dep.name() for dep \
            in INSTALLDB.get_package(package).runtimeDependencies()]

    for shobj in get_elf_files(package):
        # shobj is full path to an ELF file
        printv("    Analyzing %s" % shobj)

        needed_tuples = []
        shobjs, unused, undefined, broken = get_needed_objects(shobj)
        unuseds.update(dict([(shobj, unused)]))
        undefineds.update(dict([(shobj, undefined)]))
        brokens.update(broken)
        for needed in shobjs:
            needed_tuples.append((needed, get_pisi_package(needed)))

        dependencies[shobj] = needed_tuples

    for pc_file in get_pc_files(package):
        #os.environ["PKG_CONFIG_PATH"]
        printv("    Analyzing %s" % pc_file)

        needed_tuples = []
        requires = set(os.popen("pkg-config --print-requires --print-requires-private %s | gawk '{ print $1 }'" % os.path.basename(pc_file).replace(".pc", "")).read().split("\n")[:-1])

        for require in requires:
            require_file = "/usr/share/pkgconfig/%s.pc" % require

            if not os.path.exists(require_file):
                require_file = "/usr/lib/pkgconfig/%s.pc" % require


            needed_tuples.append((require_file, get_pisi_package(require_file)))

        dependencies[pc_file] = needed_tuples

    return print_results(dependencies, unuseds, undefineds, written_deps, brokens, package)

def check_standalone_package(package, is_pisi_file=False):
    """Traverses install_dir for the package to analyze dependencies."""
    package_name = package
    if not is_pisi_file:
        # Checking the package in CWD
        install_dir = get_install_dir_for_package()
        if not install_dir:
            print "Error: Make sure pspec.xml exists in CWD and the package is installed into /var/pisi."
            sys.exit(1)

        # Collect all the written runtime dependencies
        # classified by possible sub packages
        written_deps = {}
        pspec = pisi.specfile.SpecFile(CONSTANTS.pspec_file)
        for pkg in pspec.packages:
            written_deps[pkg] = [dep.name() for dep in \
                    pkg.runtimeDependencies()]

        #written_deps = sum(all_dependencies.values(), [])
    else:
        # Checking a .pisi file, unpack it to somewhere
        package_name = pisi.util.parse_package_name(package)[0]
        if os.path.exists(package):
            install_dir = tempfile.mkdtemp(prefix='checklib-')

            # Analyze .pisi and extract it
            pisi_package = pisi.package.Package(package)
            pisi_package.extract_install(install_dir)

            # Parse runtime dependencies from metadata.xml
            written_deps = [dep.name() for dep in \
                    pisi_package.get_metadata().package.runtimeDependencies()]


    objects = get_elf_files(install_dir, is_directory=True)
    dependencies = {}
    undefineds = {}
    unuseds = {}
    brokens = []

    # Handle LDPATHs in /var/pisi
    ld_library_paths = set()
    for shobj in objects:
        if shobj.endswith(".so") or ".so." in shobj:
            ld_library_paths.add(os.path.dirname(shobj))

    for shobj in objects:
        needed_tuples = []

        printv("    Analyzing %s" % shobj)
        shobjs, unused, undefined, brokens = get_needed_objects(shobj, list(ld_library_paths))
        unuseds.update(dict([(shobj, unused)]))
        undefineds.update(dict([(shobj, undefined)]))
        for needed in shobjs:
            if needed in objects:
                # object is shipped within this package
                depname = package_name
            else:
                depname = get_pisi_package(needed)

            needed_tuples.append((needed, depname))

        dependencies[shobj] = needed_tuples

    for pc_file in get_pc_files(install_dir, is_directory=True):
        os.environ["PKG_CONFIG_PATH"] = os.path.dirname(pc_file)

        printv("    Analyzing %s" % pc_file)

        needed_tuples = []
        requires = set(os.popen("pkg-config --print-requires %s | gawk '{ print $1 }'" % os.path.basename(pc_file).replace(".pc", "")).read().split("\n")[:-1])

        for require in requires:
            require_file = "/usr/share/pkgconfig/%s.pc" % require

            if not os.path.exists(require_file):
                require_file = "/usr/lib/pkgconfig/%s.pc" % require

            needed_tuples.append((require_file, get_pisi_package(require_file)))

        dependencies[pc_file] = needed_tuples

    # Cleanup temporary directory
    if install_dir.startswith("/tmp/"):
        shutil.rmtree(install_dir)

    return print_results(dependencies, unuseds, undefineds, written_deps, brokens, package_name)

def format_output(dep_dict):
    """Pretty print the results in the dep_dict dictionary."""
    def colorize(msg, color):
        """Colorizes the given message."""
        colors = {'green'   : '\x1b[32;01m%s\x1b[0m',
                  'red'     : '\x1b[31;01m%s\x1b[0m',
                  'yellow'  : '\x1b[33;01m%s\x1b[0m',
                  'none'    : '\x1b[0m%s\x1b[0m',
                 }
        return colors[color if sys.stdout.isatty() else 'none'] % msg

    # If empty, return
    if len(sum([line for line in dep_dict.values()], [])) == 0:
        print "Clean\n"
        return

    for filename, filedatas in dep_dict.items():
        if filedatas:
            print colorize(filename, 'red')
            for fdata in filedatas:
                if type(fdata) == types.TupleType:
                    print " > %s [%s]" % (colorize(fdata[0], 'none'), colorize(fdata[1], 'yellow'))
                else:
                    print " > %s" % colorize(fdata, 'none')

            print

def print_results(depdict, unused, undefined, written_deps, broken_deps, package_name):
    """Print results."""

    if not depdict:
        print "No dependency information."
        return 1

    systembase = get_systembase_packages()

    if unused:
        # Dump unused analysis results
        print_header("Unused direct dependency analysis:")
        for key, value in unused.items():
            # Spot broken ones and mark them
            unused[key] = map(lambda x: ("%s (broken)" % x) if x in broken_deps else x, value)

        format_output(unused)

    if undefined:
        # Dump undefined symbol analysis results
        print_header("Undefined symbol analysis:")
        format_output(undefined)

    print_header("Total direct dependencies:")

    if VERBOSE:
        format_output(depdict)
    else:
        deps = set()
        for needed in depdict.values():
            # FIXME
            deps = deps.union(set(filter(lambda x: (x not in systembase) or \
                    (SHOWSYSTEMBASE and x in systembase), [d[1] for d in needed])))
        if deps:
            # Dump the dependencies (as pisi packages)
            if isinstance(written_deps, list):
                missing_deps = sorted([mdep for mdep in \
                        set(deps).difference(written_deps)])
            elif isinstance(written_deps, dict):
                # A package which has sub packages
                missing_deps = sorted([mdep for mdep in \
                        set(deps).difference(sum(written_deps.values(), []))])

            # Filter out self dependency
            if package_name in missing_deps:
                missing_deps.remove(package_name)

            if missing_deps:
                print "\n".join(["Missing dependency %s" % package \
                        for package in missing_deps])
                print
            print "\n".join([odep for odep in \
                    sorted(set(deps).difference(missing_deps))])

    return 0


def main():
    """Entry point for checklib."""

    # Command-line parsing
    parser = OptionParser()

    parser.add_option("-v", "--verbose",
                      action="store_true",
                      dest="verbose",
                      default=False,
                      help="Dump per-file dependency information")

    parser.add_option("-s", "--show-system-base",
                      action="store_true",
                      dest="systembase",
                      default=False,
                      help="Show system.base dependencies")

    (options, packages) = parser.parse_args()

    global VERBOSE
    global SHOWSYSTEMBASE
    VERBOSE = options.verbose
    SHOWSYSTEMBASE = options.systembase

    retval = 0

    if packages:
        # An argument is passed which could be an installed package name or a *.pisi file
        if packages[0].endswith(CONSTANTS.package_suffix):
            retval = check_standalone_package(packages[0], is_pisi_file=True)
        elif packages[0] in INSTALLDB.list_installed():
            retval = check_installed_package(packages[0])

    else:
        # Check for the package that you've
        # just built e.g. working directory
        package_name = os.path.basename(os.getcwd())
        retval = check_standalone_package(package_name)

    return retval

###
if __name__ == "__main__":
    sys.exit(main())

