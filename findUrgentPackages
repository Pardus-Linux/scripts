#!/usr/bin/python
# -*- coding: utf-8 -*-

import piksemel
import bz2
import sys
import os

indexFileName = "pisi-index.xml"

def loadFile(_file):
    try:
        f = file(_file)
        d = [a.lstrip().rstrip("\n") for a in f]
        d = filter(lambda x: not (x.startswith("#") or x == ""), d)
        f.close()
        return d
    except:
        return []

def getXmlData(_file):
    if os.path.exists(_file):
        return piksemel.parse(_file)
    elif os.path.exists("%s.bz2" % _file):
        indexdata = bz2.decompress(file("%s.bz2" % _file).read())
        return piksemel.parseString(indexdata)
    else:
        print "%s not found" % indexfile
        sys.exit(1)

def fillPackageDict(tag, _hasSpecFile, packageOf):
        PackagePartOf = tag.getTagData("PartOf")
        PackageName = tag.getTagData("Name")

        if _hasSpecFile:
            PackagePackagerName = tag.getTag("Packager").getTagData("Name")
        else:
            PackagePackagerName = tag.getTag("Source").getTag("Packager").getTagData("Name")

        fullpath = "%s/%s" % (PackagePartOf.replace(".", "/"), PackageName)

        if not PackagePackagerName in packageOf:
            packageOf[PackagePackagerName] = []
        packageOf[PackagePackagerName].append(fullpath)

def parseXmlData(_index):
    packageOf = {}
    hasSpecFile = _index.getTag("SpecFile")
    if hasSpecFile:
        for i in _index.tags("SpecFile"):
            parent = i.getTag("Source")
            fillPackageDict(parent, hasSpecFile, packageOf)
    else:
        for parent in _index.tags("Package"):
            fillPackageDict(parent, hasSpecFile, packageOf)

    return packageOf

def findRequiredPackages(packageList, packagersList):
    pkgdict = {}

    for pkg in packageList:
        for packager in packagersList:
            for sourcePackage in packagersList[packager]:
                if sourcePackage.endswith("/%s" % pkg):
                    if not packager in pkgdict:
                        pkgdict[packager] = []
                    pkgdict[packager].append(pkg)

    return pkgdict

if __name__ == "__main__":

    if len(sys.argv) < 2:
        print " usage:"
        print " %s <devel indexfile path> <required packages file>" % sys.argv[0]
    else:
        indexfile = "%s/%s" % (sys.argv[1], indexFileName)
        packageList = loadFile(sys.argv[2])

        xmldata = getXmlData(indexfile)
        packagers = parseXmlData(xmldata)

        requiredPackages = findRequiredPackages(packageList, packagers)

        tmp = requiredPackages.keys()
        tmp.sort()

        for i in tmp:
            print "-> %s" % i
            for k in requiredPackages[i]:
                print "\t%s" % k

