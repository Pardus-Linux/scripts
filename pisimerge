#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys
import locale
import piksemel
import tempfile
import subprocess
from optparse import OptionParser

# You have to run this in pardus/200x folder which contains the stable and devel sub-folders.
# Usage: ./merge.py devel/kernel/default/kernel -> Will merge the differences of that package from the stable
# to the stable repository with a nice commit log. You can override the commit log with
# ./merge.py devel/kernel/default/kernel  "Just commit it, no fancy commit log."

def handle_user_choice(info):
    editor = os.environ.get("EDITOR", "vi")

    while True:
        print "\nSelect one of the following:\n\t[D]iff, [M]erge, [E]dit, [A]bort?"
        choice = raw_input().lower()
        if choice.startswith("d"):
            # Show diff
            subprocess.call([editor, info["diff"]])
        if choice.startswith("m"):
            return True
        elif choice.startswith("e"):
            # Edit
            subprocess.call([editor, info["merge"]])
        elif choice.startswith("a"):
            # Abort
            return False

def get_latest_change(path):
    os.system("svn up %s" % path)
    return int(os.popen("svn info %s | grep 'Last Changed Rev'" % path).read().strip().split(": ")[1])+1

def get_merge_log(path, rev):
    os.system("svn up devel/%s" % path)
    p = piksemel.parseString(os.popen("svn log --xml -r %d:HEAD devel/%s" % (rev, path)).read())

    merge_log = """\
Merge from devel/%s:

""" % path

    for log in p.root().tags():
        rev = log.getAttribute('revision')
        msg = log.getTagData('msg') or "<Empty log message detected! Don't speak with this author anymore.>"
        date = log.getTagData('date')
        author = log.getTagData('author')

        merge_log += "rev. %s, by %s on %s\n%s\n\n" % (rev, author, date[:10], msg.rstrip("\n"))

    return merge_log.rstrip("\n")


if __name__ == "__main__":
    locale.setlocale(locale.LC_ALL, "C")
    tmp_files = {}

    usage = "Usage: %prog [options] path1 [path2...]"
    parser = OptionParser(usage)
    parser.add_option("-m", "--message", dest="message", help="Commit message for merge operation")

    (options, paths) = parser.parse_args()

    #no path given
    if len(paths) == 0:
        parser.print_help()
        sys.exit()

    for path in paths:
        if len(paths) > 1:
            print "* Processing %s..." % path

        if path.startswith("devel/"):
            path = path.split("devel/", 1)[1]

        os.system("svn up devel/%s stable/%s" % (path, path))
        if not os.path.exists("stable/%s" % path):
            # New package

            print "\nCopying from devel/%s.." % path
            os.system("svn cp devel/%s stable/%s" % (path, path))

            os.system("svn ci stable/%s -m 'Ready for stable'" % path)

        else:
            latest = get_latest_change("stable/%s" % path)

            if not options.message:
                merge_msg = get_merge_log(path, latest)
            else:
                merge_msg = options.message

            tmp_files.clear()

            # Generate safe temporary files
            (m_fd, tmp_files["merge"]) = tempfile.mkstemp(prefix='pisimerge')
            (d_fd, tmp_files["diff"]) = tempfile.mkstemp(prefix='pisimerge')

            # Save merge message
            open(tmp_files["merge"], "w").write(merge_msg)

            # Save diff
            open(tmp_files["diff"], "w").write(os.popen("svn diff -r %d:HEAD devel/%s" % (latest, path)).read().strip())

            # Dump details
            merge_msg += "\n\n---\n%s" % os.popen("diffstat -q %s" % tmp_files["diff"]).read()
            print "\n%s" % merge_msg

            # Handle user choice
            if handle_user_choice(tmp_files):
                print "\nMerging from devel/%s.." % path
                merge_cmd = "svn merge -r %d:HEAD devel/%s stable/%s" %  (latest, path, path)
                commit_cmd = "svn ci stable/%s -F %s" % (path, tmp_files["merge"])
                os.system(merge_cmd)
                os.system(commit_cmd)

            # Clean temporary files
            for tmp in tmp_files.values():
                try:
                    os.unlink(tmp)
                except:
                    pass
