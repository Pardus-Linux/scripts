#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys
import subprocess

import pisi

def usage():
    print "Usage: %s <temporary-stable> <public-stable>" % sys.argv[0]
    sys.exit(1)

def generate_package_report(package_name, last_history):
    return

def get_different_packages(temp_stable, cur_stable):
    p = subprocess.Popen(["rsync", "-an", "--out-format=%f", temp_stable+"/", cur_stable+"/"],
                          stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()

    return [line for line in p[0].split("\n") if line.endswith(".pisi")]

def parse_package_name(package_name):
    # Strip extension if exists
    package_name.replace(".pisi", "")
    name, version, release, distro_id, arch = package_name.rsplit("-", 4)

    return name

def main():
    try:
        temp_stable_dir = sys.argv[1]
        cur_stable_dir = sys.argv[2]
    except IndexError:
        usage()

    architectures = ["i686", "x86_64"]

    for arch in architectures:
        if not os.path.exists(os.path.join(temp_stable_dir, arch)):
            print "Skipping %s as it doesn't exist.." % arch

        temp_stable_packages = {}
        report_file = "%s-stable-updates.txt" % arch

        f = open(report_file, "w")

        print "creating index for %s" % arch
        temp_stable_index = pisi.index.Index(os.path.join(temp_stable_dir,
                                                          arch,
                                                          "pisi-index.xml"))

        different_packages = get_different_packages(os.path.join(temp_stable_dir, arch),
                                                    os.path.join(cur_stable_dir, arch))


        # Create a package mapping between package names
        # and the history information
        for package in temp_stable_index.packages:
            temp_stable_packages[package.name] = package.history

        for pkg in different_packages:
            # Traverse the list of the packages that will
            # be transferred to the remote repository
            pkg_name = parse_package_name(os.path.basename(pkg))

            # Generate a report of what changed
            try:
                f.write("%s\n%s\n\n" % (pkg_name, temp_stable_packages[pkg_name][0].comment))
            except KeyError:
                print "Error happened for %s" % pkg_name

        f.close()

    return 0

if __name__ == "__main__":
    sys.exit(main())
