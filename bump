#!/usr/bin/python
# -*- coding: utf-8 -*-

# A semi-automatic bump script

import os
import sys
import pisi
import time
from optparse import OptionParser

RELEASE = """\
        <Update release="%s"%s>
            <Date>%s</Date>
            <Version>%s</Version>
            <Comment>%s</Comment>%s
            <Name>%s</Name>
            <Email>%s</Email>
        </Update>
"""

TRANSLATIONS = """\
<?xml version="1.0" ?>
<PISI>
    <Source>
        <Name>%s</Name>
        <Summary xml:lang="tr">Add a summary for the package</Summary>
        <Description xml:lang="tr">Add a description for the package.</Description>
    </Source>
</PISI>
"""

def get_and_save_user_info():
    name = "PACKAGER_NAME"
    email = "PACKAGER_EMAIL"

    conf_file = os.path.expanduser("~/.packagerinfo")
    if os.path.exists(conf_file):
        # Read from it
        name, email = open(conf_file, "r").read().strip().split(",")

    else:
        print "Please enter your full name as seen in pspec files"
        name = raw_input("> ")
        print "Please enter your e-mail as seen in pspec files"
        email = raw_input("> ")
        print "Saving packager info into %s" % conf_file

        open(conf_file, "w").write("%s,%s" % (name, email))

    return name, email

def increment_release(pspec, comment, packager_name, packager_email,
                      critical_packages, sec_packages,
                      bumptype, version):

    last = pisi.specfile.SpecFile("pspec.xml").history[0]
    release = int(last.release) + 1
    if not version:
        version = last.version
        if not comment:
            comment = last.comment
    else:
        comment = "Version bump."

    date = time.strftime("%Y-%m-%d")

    if bumptype:
        updatetype = " type=\"%s\"" % bumptype
    else:
        updatetype=""

    crit_or_sec = ""

    if sec_packages:
        for pkg in sec_packages:
            crit_or_sec += "\n            <Type package=\"%s\">security</Type>" % pkg
    elif critical_packages:
        for pkg in critical_packages:
            crit_or_sec += "\n            <Type package=\"%s\">critical</Type>" % pkg

    global RELEASE
    new_release = RELEASE % (release, updatetype, date, version, comment,
                             crit_or_sec,
                             packager_name,
                             packager_email)

    return pspec.replace("<History>\n", "<History>\n%s" % new_release)

def update_sha1sum(pspec):
    sums = []
    for archive in pisi.specfile.SpecFile('pspec.xml').source.archive:
        uri = os.path.basename(archive.uri)
        sh = os.popen("sha1sum /var/cache/pisi/archives/%s" % uri).read().split()[0]
        sums.append(sh)

    print sums
    sumi = 0

    if len(sums) > 0:
        ret = []
        for line in pspec.split("\n"):
            if " <Archive" in line:
                nls = line.split("sha1sum=\"")
                nl = nls[0] + "sha1sum=\"%s\"" % sums[sumi] + nls[1].split("\"", 1)[1]
                ret.append(nl)
                sumi += 1
            else:
                ret.append(line)

        return "\n".join(ret)

if __name__ == "__main__":

    usage = "Usage: %s [options]"
    parser = OptionParser(usage)
    parser.add_option("-m", "--message",
                      dest="message",
                      help="Commit message for merge operation.")
    parser.add_option("-n", "--no-increment",
                      dest="no_increment",
                      default=False,
                      help="Do not increment release, just update sha1sums.",
                      action="store_true")
    parser.add_option("-c", "--critical",
                      dest="critical",
                      default=None,
                      help="Mark update as critical and add Type=critical for those packages",
                      action="append")
    parser.add_option("-s", "--security",
                      dest="security",
                      default=None,
                      help="Mark update as security and add Type=security for those packages",
                      action="append")
    parser.add_option("--all-critical",
                      dest="bumptype",
                      action="store_const",
                      const="critical",
                      help="Mark the update critical for all packages [old way]")
    parser.add_option("--all-security",
                      dest="bumptype",
                      action="store_const",
                      const="security",
                      help="Mark the update security for all packages [old way]")
    parser.add_option("-v", "--version",
                      dest="version",
                      help="Version of the package. If none specified \
                            it is the version of the latest update")

    (options,paths) = parser.parse_args()

    pspec = open("pspec.xml", "r").read().strip()

    # First fetch the tarball
    if os.getenv("USER") != "root":
        os.system("sudo pisi build pspec.xml --fetch")
    else:
        os.system("pisi build pspec.xml --fetch")

    # Update sha1sum
    pspec = update_sha1sum(pspec)

    # Add translations.xml
    if not os.path.exists("translations.xml"):
        open("translations.xml", "w").write(TRANSLATIONS % os.path.basename(os.getcwd()))
        os.system("svn add translations.xml")

    packager_name, packager_email = get_and_save_user_info()

    if options.no_increment:
        new_pspec = pspec
    else:
        # Increment release
        new_pspec = increment_release(pspec, options.message, packager_name, packager_email,
                                      options.critical, options.security,
                                      options.bumptype, options.version)

    open("pspec.xml", "w").write(new_pspec)
    # To put a newline at the end of the pspec.xml
    open("pspec.xml", "a").write("\n")
